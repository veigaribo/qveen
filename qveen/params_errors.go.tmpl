{{- def "strescape" -}}
{{ . | escapebackslash "\\\"" | repl "\n" "\\n" }}
{{- end -}}

{{- $usesfmt := jq1 ".errors[].msgf | strings" . -}}

package {{.package}}

// This file has been generated by Qveen from
// `qveen/params_errors.toml`.
// Please do not modify it directly.

import (
	{{# if $usesfmt #}}
	"fmt"
	{{# end #}}
	"github.com/veigaribo/qveen/utils"
	{{# if $usesfmt #}}
	"github.com/veigaribo/qveen/prompts"
	{{# end #}}
	"strings"
)

type ParamError struct {
	Path   []any
	Reason string
}

func MakeParamError(path []any, reason string) ParamError {
	return ParamError{
		Path:   path,
		Reason: reason,
	}
}

func (e ParamError) Error() string {
	var builder strings.Builder

	builder.WriteRune('`')
	utils.WritePathString(e.Path, &builder)
	builder.WriteRune('`')
	builder.WriteRune(' ')
	builder.WriteString(e.Reason)

	return builder.String()
}

// Specific errors for use with `errors.As`.

{{- def "param" -}}{{.}}{{- end -}}

{{- def "err" -}}
{{- $struct := printf "%sError" .name -}}

type {{$struct}} struct {
	Err ParamError
}

func Make{{$struct}}(path []any) {{$struct}} {
	return {{$struct}}{
		Err: MakeParamError(
			path,
			{{if .msgf -}}
			fmt.Sprintf("{{t "strescape" .msgf}}", {{t "join" (map "tmpl" "param" "els" .msgp "sep" ", ")}})
			{{- else -}}
			"{{t "strescape" .msg}}"
			{{- end}},
		),
	}
}

func (e {{$struct}}) Error() string {
	return e.Err.Error()
}

func (e {{$struct}}) Unwrap() error {
	return e.Err
}{{- end -}}

{{t "join" (map "tmpl" "err" "els" .errors "sep" "\n\n" "pre" "\n\n")}}
