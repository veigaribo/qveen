{{- /* Build error list. */ -}}

{{- $errors := list -}}

{{- def "mkerr" -}}
{{- $name := pascalcase .key -}}
{{- $value := .value -}}
{{- $errors := .errors -}}

{{- if $value._type }}
{{- if isarr $value._type}}
{{- append $errors (map
          "name" (printf "%sWrongType" $name)
          "msg" (printf "field present but contains neither %s nor %s."
                        (index $value._type 0) (index $value._type 1))) -}}
{{- else -}} {{- /* if isarr $value._type */ -}}
{{- append $errors (map
          "name" (printf "%sWrongType" $name)
          "msg" (printf "field present but does not contain %s." $value._type)) -}}
{{ end -}} {{- /* if isarr $value._type */ -}}
{{ end -}} {{- /* if $value._type */ -}}

{{- $requiredmsg := "missing required field." -}}
{{- if $value._required_addendum -}}
{{- $requiredmsg = printf "%s %s" $requiredmsg $value._required_addendum -}}
{{- end -}} {{- /* if $value._required_addendum */ -}}

{{- if $value._required -}}
{{- append $errors (map
          "name" (printf "%sMissing" $name)
          "msg" $requiredmsg) -}}
{{- end -}} {{- /* if $value._required */ -}}

{{- if $value._in -}}
{{- append $errors (map
          "name" (printf "%sInvalid" $name)
          "msgf" "field does not contain one of the allowed values: %v."
          "msgp" (list $value._in)) -}}
{{- end -}} {{- /* if $value._in */ -}}

{{- $key := .key -}}

{{- range $x := jqn ". | to_entries[] | select(.key | startswith(\"_\") | not)" .value -}}
{{t "mkerr" (map "errors" $errors "key" (printf "%s %s" $key $x.key) "value" $x.value)}}
{{- end -}} {{- /* range */ -}}

{{- end -}} {{- /* def "mkerr" */ -}}

{{- range $k, $v := .fields -}}
{{- t "mkerr" (map "errors" $errors "key" $k "value" $v) -}}
{{- end -}} {{- /* range $k, $v := .fields */ -}}

{{- range .pluserrors -}}
{{- append $errors (map
                    "name" .name
                    "msg" .msg) -}}
{{- end -}} {{- /* range $k, $v := .pluserrors */ -}}

{{- /* Write Go. */ -}}

{{- $usesfmt := jq1 ".[].msgf | strings" $errors -}}

package {{.package}}

// This file has been generated by Qveen from `qveen/params/errors.yaml`.
// Please do not modify it directly.

import (
	{{# if $usesfmt #}}
	"fmt"
	{{# end #}}
	"github.com/veigaribo/qveen/utils"
	{{# if $usesfmt #}}
	"github.com/veigaribo/qveen/prompts"
	{{# end #}}
	"strings"
)

type ParamError struct {
	Path   []any
	Reason string
}

func MakeParamError(path []any, reason string) ParamError {
	return ParamError{
		Path:   path,
		Reason: reason,
	}
}

func (e ParamError) Error() string {
	var builder strings.Builder

	builder.WriteRune('`')
	utils.WritePathString(e.Path, &builder)
	builder.WriteRune('`')
	builder.WriteRune(' ')
	builder.WriteString(e.Reason)

	return builder.String()
}

// Specific errors for use with `errors.As`.

{{- def "err" -}}
{{- $struct := printf "%sError" .name -}}

type {{$struct}} struct {
	Err ParamError
}

func Make{{$struct}}(path []any) {{$struct}} {
	return {{$struct}}{
		Err: MakeParamError(
			path,
			{{if .msgf -}}
			fmt.Sprintf({{json .msgf}}, {{join .msgp ", "}})
			{{- else -}}
			{{json .msg}}
			{{- end}},
		),
	}
}

func (e {{$struct}}) Error() string {
	return e.Err.Error()
}

func (e {{$struct}}) Unwrap() error {
	return e.Err
}{{- end -}} {{- /* def "err" */ -}}

{{t "join" (map "tmpl" "err" "els" $errors "sep" "\n\n" "pre" "\n\n")}}
